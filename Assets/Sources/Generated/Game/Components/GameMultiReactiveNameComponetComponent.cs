//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public MultiReactive.NameComponet multiReactiveNameComponet { get { return (MultiReactive.NameComponet)GetComponent(GameComponentsLookup.MultiReactiveNameComponet); } }
    public bool hasMultiReactiveNameComponet { get { return HasComponent(GameComponentsLookup.MultiReactiveNameComponet); } }

    public void AddMultiReactiveNameComponet(string newName) {
        var index = GameComponentsLookup.MultiReactiveNameComponet;
        var component = (MultiReactive.NameComponet)CreateComponent(index, typeof(MultiReactive.NameComponet));
        component.name = newName;
        AddComponent(index, component);
    }

    public void ReplaceMultiReactiveNameComponet(string newName) {
        var index = GameComponentsLookup.MultiReactiveNameComponet;
        var component = (MultiReactive.NameComponet)CreateComponent(index, typeof(MultiReactive.NameComponet));
        component.name = newName;
        ReplaceComponent(index, component);
    }

    public void RemoveMultiReactiveNameComponet() {
        RemoveComponent(GameComponentsLookup.MultiReactiveNameComponet);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMultiReactiveNameComponet;

    public static Entitas.IMatcher<GameEntity> MultiReactiveNameComponet {
        get {
            if (_matcherMultiReactiveNameComponet == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MultiReactiveNameComponet);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMultiReactiveNameComponet = matcher;
            }

            return _matcherMultiReactiveNameComponet;
        }
    }
}
