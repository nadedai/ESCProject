//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public MultiReactiveNameComponetListenerComponent multiReactiveNameComponetListener { get { return (MultiReactiveNameComponetListenerComponent)GetComponent(GameComponentsLookup.MultiReactiveNameComponetListener); } }
    public bool hasMultiReactiveNameComponetListener { get { return HasComponent(GameComponentsLookup.MultiReactiveNameComponetListener); } }

    public void AddMultiReactiveNameComponetListener(System.Collections.Generic.List<IMultiReactiveNameComponetListener> newValue) {
        var index = GameComponentsLookup.MultiReactiveNameComponetListener;
        var component = (MultiReactiveNameComponetListenerComponent)CreateComponent(index, typeof(MultiReactiveNameComponetListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceMultiReactiveNameComponetListener(System.Collections.Generic.List<IMultiReactiveNameComponetListener> newValue) {
        var index = GameComponentsLookup.MultiReactiveNameComponetListener;
        var component = (MultiReactiveNameComponetListenerComponent)CreateComponent(index, typeof(MultiReactiveNameComponetListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveMultiReactiveNameComponetListener() {
        RemoveComponent(GameComponentsLookup.MultiReactiveNameComponetListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMultiReactiveNameComponetListener;

    public static Entitas.IMatcher<GameEntity> MultiReactiveNameComponetListener {
        get {
            if (_matcherMultiReactiveNameComponetListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MultiReactiveNameComponetListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMultiReactiveNameComponetListener = matcher;
            }

            return _matcherMultiReactiveNameComponetListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddMultiReactiveNameComponetListener(IMultiReactiveNameComponetListener value) {
        var listeners = hasMultiReactiveNameComponetListener
            ? multiReactiveNameComponetListener.value
            : new System.Collections.Generic.List<IMultiReactiveNameComponetListener>();
        listeners.Add(value);
        ReplaceMultiReactiveNameComponetListener(listeners);
    }

    public void RemoveMultiReactiveNameComponetListener(IMultiReactiveNameComponetListener value, bool removeComponentWhenEmpty = true) {
        var listeners = multiReactiveNameComponetListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveMultiReactiveNameComponetListener();
        } else {
            ReplaceMultiReactiveNameComponetListener(listeners);
        }
    }
}
